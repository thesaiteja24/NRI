import React, { useState, useEffect } from "react";
import axios from "axios";
import Dropdown from "./Dropdown";
import InputField from "./InputField";
import Table from "./Table";

const BatchScheduler = () => {
  const [batchno, setbatchno] = useState("");
  const [mentorName, setMentorName] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [roomNo, setRoomNo] = useState("");
  const [selectedTechStack, setSelectedTechStack] = useState("");
  const [selectedSubjects, setSelectedSubjects] = useState([]);
  const [availableSubjects, setAvailableSubjects] = useState([]);
  const [batches, setBatches] = useState([]);

  const API_BASE_URL = "http://192.168.29.3:5000/api/v1/schedule";

  const techStackSubjects = {
    "Python Full Stack (PFS)": ["Python", "Flask", "MySQL", "Frontend", "Soft Skills"],
    "Java Full Stack (JFS)": ["Core Java", "Advanced Java", "MySQL", "Frontend"],
  };

  const handleTechStackChange = (value) => {
    setSelectedTechStack(value);
    setAvailableSubjects(techStackSubjects[value] || []);
    setSelectedSubjects([]);
  };

  const fetchSchedules = async () => {
    try {
      const response = await axios.get(API_BASE_URL);
      setBatches(response.data.data);
    } catch (error) {
      console.error("Error fetching schedules:", error.response || error.message);
    }
  };

  const handleAddBatch = async () => {
    if (!batchno || !selectedTechStack || selectedSubjects.length === 0 || !startTime || !endTime || !roomNo) {
      alert("Please fill all fields!");
      return;
    }

    const newBatch = {
      batchno: batchno.toUpperCase(),
      mentorName: mentorName.toLowerCase(),
      startTime,
      endTime,
      roomNo: parseInt(roomNo, 10),
      techStack: selectedTechStack === "Python Full Stack (PFS)" ? "PFS" : "JFS",
      subjects: selectedSubjects,
    };

    try {
      const response = await axios.post(API_BASE_URL, newBatch);
      fetchSchedules();
      setbatchno("");
      setMentorName("");
      setStartTime("");
      setEndTime("");
      setRoomNo("");
      setSelectedTechStack("");
      setSelectedSubjects([]);
    } catch (error) {
      console.error("Error adding batch:", error.response || error.message);
    }
  };

  useEffect(() => {
    fetchSchedules();
  }, []);

  return (
    <div className="min-h-screen bg-gray-100 py-10 px-6">
      <div className="bg-white shadow-lg rounded-lg p-8 max-w-3xl mx-auto">
        <h1 className="text-3xl font-bold text-center text-blue-700 mb-6">Batch Scheduler</h1>
        <div className="mb-6">
          <Dropdown
            label="Tech Stack"
            options={Object.keys(techStackSubjects)}
            value={selectedTechStack}
            onChange={(e) => handleTechStackChange(e.target.value)}
          />
        </div>
        {selectedTechStack && (
          <div className="mb-6">
            <Dropdown
              label="Subjects"
              options={availableSubjects}
              multiple
              value={selectedSubjects}
              onChange={(e) =>
                setSelectedSubjects([...e.target.selectedOptions].map((option) => option.value))
              }
            />
          </div>
        )}
        {selectedSubjects.length > 0 && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <InputField
              label="Batch ID"
              value={batchno}
              onChange={(e) => setbatchno(e.target.value)}
              placeholder="Enter Batch ID"
            />
            <InputField
              label="Mentor Name"
              value={mentorName}
              onChange={(e) => setMentorName(e.target.value)}
              placeholder="Enter Mentor Name"
            />
            <InputField
              label="Start Time (HH:MM)"
              value={startTime}
              onChange={(e) => setStartTime(e.target.value)}
              placeholder="Enter Start Time (e.g., 09:00)"
            />
            <InputField
              label="End Time (HH:MM)"
              value={endTime}
              onChange={(e) => setEndTime(e.target.value)}
              placeholder="Enter End Time (e.g., 18:00)"
            />
            <InputField
              label="Room Number"
              value={roomNo}
              onChange={(e) => setRoomNo(e.target.value.replace(/\D/g, ""))}
              placeholder="Enter Room Number"
            />
          </div>
        )}
        <button
          onClick={handleAddBatch}
          className="block w-full bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition duration-300"
        >
          Add Schedule
        </button>
      </div>
      <div className="mt-10">
        <Table data={batches} />
      </div>
    </div>
  );
};

export default BatchScheduler;
